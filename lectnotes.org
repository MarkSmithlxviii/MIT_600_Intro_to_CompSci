# Author Mark Smith

Notes taken while listening to the [[http://ocw.mit.edu/courses/electrical-engineering-and-computer-science/6-00sc-introduction-to-computer-science-and-programming-spring-2011/index.htm][MIT 600]] spring 2011 online lecture videos.

* Lecture one
** Aim of the course
We want to be able to map a  problem to a computational framework.
We will be able to write small and medium sized problems.
How well can we solve problems.
Studies indicate that students learn more if they take their own notes.
Programing is fun! 
Learn computational problem solving
** What is computation
There are basically two types of knowledge
 - Declerative - statements of fact eg. "A good health care plan improves the
   quality of medical care while saving money" or "y is the sqrt of x iff y*y
   =x" this does not tell us how to find sqrt x however it does tell us if
   a guess is correct.
 - Imperitive tells us how to acomplish something.  eg recipie for chocolate
   cake.  eg approximaton of sqrt guess(new) = ( guess(old) + x/g(old))/2
   this algorythm (a description of how to perform a computation) has 
   converged when g*g is close enough to x.
     - The algorythm contains a set of instructions (steps to be executed)
     - flow of control, order to execute the steps, and a return to g(new)
     - termination condition
How do we make a machine follow the algorithim?  Build a machine to perform
only this task, a fixed program computer, eg Turing's bombs.
These are limited useful computer.
The stored program computer, changed everything.  The instructions are no 
different than the data. The machine became infinitely flexible.  Programs
could produce programs.  This lead to the computer itself being considered 
as a program, namely computer as interpreter.
An interpreter can execute any legal set of instructions.
Most computers have only a very small number of built in instructions.
Turing showed that 6 primitive instructions were all that was needed.
Progaming language provides a set of primitive instructions and set of 
primitive flow of control and the combining mechanisms.

The computer will always do exactly what it is told.

A programing language has:
  - Syntax which sequences of symbols and characters make a well formed string
  - Static semantics which well formed strings have meaning eg Susan is 
    building is syntactially well formed, the words are in the right order
    but not very meaningful
  - Semantics the meaning of the sting that passes both tests above.

In natural language meaning is ambigous, a well formed statement in a
programming laguage has exactly one meaning.

What happens when we write a progam that doesn't do what we wanted it to do?
- Crash in a properly designed computing system one crash will not affect 
the rest of the program
- It may not stop running.  If we don't know how long the program should run
this will be hard to judge.  Infinite loop
- may run to completion and give the wrong answer.
In Ascending order of badness.
Some languages give alot of help for these problems

Lecture done
** Answers to the questions on the course web page
*** What is the difference between declaritive and imperitive knowledge
Declatitive deals with declarations - facts observations 'I like chocolate cake.  
while imperitive is the knowledge of how.  How to bake the cake how to calculate sqrt(x)
*** What is the advantage of a stored program computer
A stored program computer is flexible.  It can be used to solve any problem that 
a fixed program computer can solve however it is not limited to only one type
of problem.
*** What are syntax, static semantics and semantics of a language
Same as natural language syntax is the grammer, what sequence of symbols
constitutes a well formed string/sentence.  
Static semantics defines which of the well formed strings have meaning.  
Semantics are the meanings of the strings that pass the above tests.
*** What kinds of errors can occur in a program
The program can crash, terminate without completing and without returning an
answer.
The program can loop continously never returning a result.
The program can finish and return an incorrect answer. 
* Lecture 2: Core Elements of a Program
** IDE 
integrated development environment
includes a specialized text editor
syntax highlighting
python shell
debugger most programers rely on print statements for debugging
 - when using print statements try and print value and type as type is not
   necessarily clear from value alone
** objects
everything in python is an object.
even the code is an object
each object has a type.  inbuilt function type that will return the object type
two basic types of object scalar and non scalar
scalars are non divisible / atom
 - integer 
 - float a computer approximation of the real numbers
 - boolean TRUE/FALSE
 - none is nonetype used as a temp placeholder
 - does not have char (character)object type however strings can be of length 1
for every type there is a literal eg 3 is a literal of the integer between 
2 and 4, 'ab' is a string literal.
** expressions
an expression is a sequence of operands(objects) and operators
some of the operators are overloaded the meaning will be dependant on the type
of operands eg 'a'+'b' + is overloaded and means concatinate
** programs
A program is a sequence of commands that tell the computer to do something
*** General
Indentation has meaning python is unusual in this way.  Programmers use 
indentation to make the program readable.
Programs are meant to be read not just executed, the structure of the program
should reflect the semantics of the program.
Assignment binds the name to the object
*** Types of programs
 - a straight line program runs from start to finish in a straight line (boring)
 - most recipies have some sort of looping or test
   eg cook the meat until it is 70 C.
 - The most primitive test is a Conditional statement using if else elif
   - can be nested one condition within another
 - conditional statements introduce branchs into the program. but the program
   still runs from start to finish there are multiple possible paths to a 
   common end point.
 - Looping constructs, Turing Complete  Introduces iteration statements can 
   be executed more than once
**** Time to execute a program
A straight line program execution time depends on the number of statements.
A branching program will depend on the length of the longest set of branches.
A branching program is only slightly more complicated than a straight line
program

Not much can be accomplished with these types of programs.  We can only type 
so many lines of code in our lifetimes.  A way to evaluate the 'goodness' of 
a program is that the execution time is proportional to the input rather than 
to the number of lines of code in the program.

Looping programs (iteration) the program can reexecute statements depending on 
the conditional statements execution times are dependant on the size of the 
input data rather than the size of the program.

** variables
a name for an object (python)
assignment statement binds a name to an object
** comments
Make the program easier to read
use comments to explain your thinking
what is the algorythm that has been used 
not to explain the language
answer the question what was I thinking when re-reading the script in 
2 years from now.
** Questions on the website.
*** What is a type
Int Float String, Type is a property of an object.
*** what is an expresion
it is a combination of operands and operators that can be interperted into a 
value
*** What is type conversion
Changing an object from one type to another.
*** what is a keyword
A protected string that cannot be used as the name of an object eg float or if
*** What is the difference between a straight line program and a branching Program
a straight line program runs from start to finish along the same path every time
while a branching program will change paths depending on conditional statements
*** What is a conditional
if and else,  it is a test to see if a block of code should be run. 
* recitation 1 (after lecture 2)

** Computation
Take a real problem and break it down into small managable pieces
actual code is non diciferable 10110101001101001.
a programing language can be non readable or it can be easily readable
syntax and static semantics are realatively easy for a compiler/interperater 
to check.
semantics not so much eg 1/0 is leagal and conforms to static semantics however
it is wrong
Python is a general purpose language 
interperted
A program is a sequence of expresions - operands and operators.
everything in Python is an object all objects have types, int, float, str etc.
Python determines the type at assignment depending on the input types. 
While is used if we dont know how long the loop needs to run
For is used if we know exacly ow long to run the loop.

* Lecture 3: Problem Solving
** Decramenting functions.
The cube root program will terminate for all integer values of x.  This is 
because a decramenting function has been used (as a notion in the authors
head).  every time we write a loop think of decrementing functions.  

python

#Find the cube root of a perfect cube
x = int(raw_input('Enter an integer: '))
ans = 0
while ans*ans*ans < abs(x):
    ans = ans + 1
    #print 'current guess =', ans
if ans*ans*ans != abs(x):
    print x, 'is not a perfect cube'
else:
    if x < 0:
        ans = -ans
    print 'Cube root of ' + str(x) + ' is ' + str(ans)

*** Properties of a decrimenting function
it is only in the mind of the programmer but it is used to think 
about the program.
 - map a set of program variables to an integer
 - when the loop is entered it takes a non negative value
 - When its value gets to be less than or equal to zero the loop terminates
 - decreased at each step of the loop
the decrimenting function in the cube root program is
abs(x)-ans^3 this satisfies the conditions and will terminate.

This is an example of guess and check. called exhaustive enumeration. 
Enumerating all possible answers brute force.  if we get to the end condition 
and have not found a perfect cube root then we know that the number is not a 
perfect cube.  This is a brute force process.  This is an acceptable 
way to solve problems as computers are sooooo fast. But will not always be
applicable especially if the decrimenting function takes a looooong time to 
converge.
There is nothing that can be done with a for loop that cant be done with a 
while loop but the for loop makes life a lot easier.

** Approximation 20:00
What does it meat to find the Square root?  eg we cannot find two numbers 
that will multipy together to make 2, for example.
Approximtion is finding an answer that is good enough.  requires answering
 the question how good does the estimate have to be?  eg I would like a value
sqrt (2) that is within epsilon of the real answer or find y such that 
y*y = 2 +- Epsilon. If an exact answer does exist this will likely not find it.

32:00  Approximation is dependent on 
- The incriment of each step in the loop
- Epsilon
- The distance between the start and the answer

To make it faster need to find a better algorythim
** Bisection Search 32:30
two algorythm types/methods
1) Cut the search space in half each iteration Brute force only trims off the increment with each pass of the loop.  This is still guess and check.
2) did not get the second method in lecture 3
it is easy to write a program that is fast but yields the wrong answer
the trick is to write a program that is both fast and yields the correct answer
bisection requires that answer lies in the search space.  the square root 
bisection method in the lecture code will not work for some values of x
as suspected it does not work for values between -1 and 1.  The answer does not lie in the search space.
To fix the algorythm need to make the initial high = max (x, 1.0)
* Lecture 4 Machine interpretation of code
Lecture completed
** Debugging code
The most important thing to learn in 6.00 intro to computer science is; How to debug programs.
The easy part is writting out the code for the first time, the hard part is getting it to work.
When debugging don't be lazy.  It is worth the extra time to clearly indicate what is being printed rather than a bunch of unlabled variables.
Two tools that are good for debugging would be print this and print that to allow observation of the variables.  Assert will stop the program if it evaluates to false, this can be used to stop after a certain number of iterations.

** Functions
The square root code from last lecture works, however, it is not super efficient.  Every time we would like to solve a new square root we need to modify the code to change the value of X.
If we wanted to incorporate the code into a larger piece of code we would end up with multiple repetitions of the same code.  not super awesome.
Code is not an essay that we sweat to stretch to a given length.  In general having more code is a bad thing.  Typically the more code there is the harder it is to make it work.

*** What to we hope to accomplish by adding functions to a programming language.
Incorporate a mechanism to provide two things:

**** Decomposition
- Creates structure
- Allows us to break up the program into Modules
  - Self contained and reusable code.


**** Abstraction
- Suppresses details
- allows us to use the code as a black box
  - we can use other peoples code
  - only need to know what it does not how it does it
  - Ignorance is bliss
  - we can not necessarily see the code and indeed in many cases do not necessarily want to see the code and how it functions.
  - EG 'cat' we don't know how python achieved the result we just wanted it to achieve it.

*** Using Functions
Pick a name with meaning, this will make function calls easier to read if the name is intuitive.  Functions allow us to extend the language by adding primitives that can be used in a similar manner to the built in primitives.
 
def short for define.  followed by a name with (paramaters). and then function body.  In the body we can write any code we want as well as a special function only keyword return.  If return is not included in the function is will return the special value None. Executing def does nothing other than put some names in the environment
Functions can be nested

Note:  There is no relation between the formal (variable(s) used in the function) and variables used to call the function.  In other words, there is no relationship between the variable used to call the function and the variable used in the function.

def f(x):          # this x is un-related to the x below that was used to call the function.
   x = x + 1
   print 'x =', x
   return x

x = 3            # assign the value of '3' t a varible called 'x'.  this value will be passed to the function in the next line.
z = f(x)         # Assigning the value returned by the function to a variable called 'z'
print 'z =', z   # Print the value of the variable containing the value returned by the function.
print 'x =', x   # Print '3' the value passed to the function, this'x' has noting to do with the variable, of the same name, used by the function.

*** What happens when we call a function?
At the call:
1. The FORMAL parameter (the parameter used in the function), 'x' in the code above, is bound to the value of the ACTUAL, 'x' in the code above.
   1. Upon entry into the function a new SCOPE is created.
   2. A scope is a mapping of names to objects.
   3. Each function has its own scope and maps its own variables to values relavant to the function.
   4. also called a stack frame
   5. in the code below when the script is sent to the interpreter we begin with
      1. Main - the main scope
      2. Main calls f and the interpreter creates the scope for 'f1' and maps x to g()
      3. f calls g and the interpreter then creates the g scope and maps x to abc within that scope.
      4. when g completes it 'pops' the stack this gets rid of the g scope, when f completes similarly the stack is popped and the f scope is deleted. leaving only the mian scope
      5. The stack is first in last out
      6. The stack can be viewed with the stack viewer.  But only if the object of interest has not been popped out of the stack.
      7. The various occurances of x can be thought of as g.x, f.x and main.x indicating the scopes in which they are maped to values.

def f1(x):
   def g():
       x = 'abc'
   x = x + 1
   print 'x =', x
   g()
   assert False
   return x

** Answers to the questions on the web page
What is decomposition?  Decomposition allows us to structure a program by using modules, self contained re-useable pieces of code.
What is abstraction?  Abstraction is using the code as a black box, we are interested in the results, the returned values and not concerned with the how of the code.
What is the difference betwee formal and actual parameters? The formal parameter is used inside of a proceedure, the actual is the paramter that is used to asign the value to the formal. 

* Recitation 2 Loops, Tuples, Strings and Functions
A for loop requires something that is innumerable.  
Range will count backwards if given a negative step.  Range will truncate floats. 

** Tuples
Non-scalar data type that can hold multiple objects.  immutable.  literal syntax for a tuple is comma separated values contained inside of parenthesis.  The items in a tuple are indexed.  Accessing the items of a tuple is done with square brackets tupleName[index], indexing starts at 0.  negative indicies start at the non 0 end of the tuple and count towards the 0 end.  Tuples can be sliced tupleName[start:finish]  start is inclusive finish is exclusive. Start is optional, if it is left out then impicit start is index 0.

Slicing [:] returns the whole tuple, [-1] returns the last item of the tuple, and [:-1] returns all but the last item.  In summary blank includes the last item -1 is exclusive of the last item.

** Functions
A 'bit' of code that is:
 - Named, so that it can be refered to, 'called'
   - the name should be meaningful
 - Takes input
 - Performs some task (function) on the input, and
 - Returns a result.
 - in python
   - functions are broken out with the keyword def
   - the function name follows def and
   - the input parameters (in, brackets) that will be passed to the function follow the name
   - the def line is completed with a :
   - The next lines are set out with tripple double quotes (""")and are the doc string
     - The doc string contains the purpose of the function, a definition of the inputs and outputs and the type of inputs and outputs.
   - The body of the function follows the doc string
   - a return statement is required to send the output back to who/what called the function.  Python will implcitly return 'NONE' if there is no return statement.
 - Python variables have scope.
   - for functions this means that:
     - Variables defined in the function are not available for use outside the function
       - Global variables can be used in the function however they can be overwritten within the function as well.
       - Using globals can lead to unexpected errors or behavior.
       - If the global is to be manipulated then the global keyword is required to map the global to a local.
       - If the global is called in a print statement for example, the global keyword is not required and possibly under other conditions as well.
     - Varibles passed to the function are not altered foo(bar) will modify the local variable and leave the global unchanged bar = foo(bar) will of course result in a modified bar.
 - Return is not print and print is not return 

** video stopped at 55:00

* Lecture 5 Objects in Python.
** Collecion of items in Python
Python will collect 'items' in three data structures
- tuples
  - immutable
  - (items, 'in', a , tuple)
- lists
  - mutable
  - [items, in, a, list],
  - can have a list of list(s), the internal lists maintian all assignment ie. list.append(foo) if foo is mutated then or reassigned then the changes will be reflected in the foo contained within List as well.
  - Individual elements can be changed this is not assignment.  list [1] = 'foo' changes the value of list[1] it does not bind/assign 'foo' to list[1].  this is not conventional assignement list[1] is not a name with a bound value associated with it is list[1] will refer to the second element in flat and modifying the list can change the value of list[1] with out specifically assigning a new value.  Sort, for example may change the value of list[1].
    - for example:
#+BEGIN_SRC Python
## code from letcure handout with ## comments by me
L1 = [2]
L2 = [L1, L1]
print ('L2 =', L2)
## output >>> L2 = [[2],[2]]
## the first and second elements in L2 point to the same object as L1 
L1[0] = 3
## the object 
## - list, length 1, contents int 2 - has been mutated to 
## - list, length 1, contents int 3 -.  This is the object 
## that both L1 and the 0th and 1st elements of L2 pointed to. 
print ('L2 =', L2)
## output >>> L2 = [[3],[3]]
## L2 has changed although it has not been expressly changed
L2[0] = ('a')
print ('L2 =', L2)
## output >>> L2 = ['a', [3]]



L1 = [2]
## changes the binding of L1.  
## This name now points to the new object, a list length 1 with 
## the contents of int 2. does not affect the object
## - list, length 1, contents int 3 -
print ('L2 =', L2)
## output >>> L2 = ['a', [3]]
## the first (remember 0th 1st) element in L2 still points to the object
## - list, length 1, contents int 3 -
L2 = L1
## L2 and L1 are different names pointing to the same object
L2[0] = 'a'
## Mutating the object to which both names pointed  
print ('L1 =', L1)
## output >>> L1 = ['a']
## although L1 was not specifically changed L1 is pointing to the now mutated object
print ('L2 =', L2)
## output >>> L2 = ['a']
## L2 points to the same mutated object.



L1 = [2]
L2 = L1[:]
## L2 is a new list filled with the snapshotted contents of L1
L2[0] = 'a'
print ('L1 =', L1)
## output >>> L1 = [2]
## L2 pointed to a new object that happened to have the same contents as L1, however briefely that may have been.
#+End_SRC
  - binding/assignment maps a name to an object.  Mutation changes the object list[1]='foo' is an example of mutation
  - Dictionaries a set of key value pairs
    - Dicts are {'key' : value, 'pairs':'in a dict'}
    - The values are mutable
    - A Dict is an unordered prior to 3.5
    - the indicies need not be integers.
      - The indicies of a dict are called keys
      - Keys are any immutable object, this is required to make the dict hashing work.
    - del[key] is used to remove the key and value.
Tuples and lists are ordered sequences (dicts are now 3.5?)
 
a slice is a range of values a subset
lists are more complicated than tuples
Append is a list method list.append(foo) is similar to a function and can safely be consitered as an alternative syntax to the function append(list, foo).  Append mutates the list it is not assigning.  
Methods have mutation as a side effect. Functions take input and preform computations and retun a value.  The original input remains unchanged.  If the retunred value is to be used it must be assigned to a variable for further computation.  A method is invoked precicely for the side effect, the modification of the object.
Assigning a concatinated group of tuples

** Alias
Alias is pointing to the same object with different names.  This will have little effect if the object pointed to is immutable.  EG the int 3 is always 3 and we cannot change it.  If the object is mutable having multiple aliases can lead to unforeseen consequences.
** Answers to Questions on Session web page
What is mutability
Changing the value(s) of an object.  It is not creating a new object or reassigning a variable binding.

What is the important difference between a list and a tuple
A list is mutable, a tuple is not.

What is cloning 
Creating a copy of an object, two or more variable names will point to two or more identical objects, as opposed to ailiasing which will have two or more variable names pointing to the same object.  Cloning is a technique to mutate the values of an object without mutating the original object.

What are the important aspects of a dictionary
- The keys are immutable
- the elements of a dict are {'key': value} pairs.
- Unordered (before 3.5)
** Lecture completed
* Lecture 6: Recursion
Dicts can be implemented with lists however the look up time would be proportional to the length of the list, dict look ups are constant irriegardless of the size of the dict.
Functions allow us to not rewrite in multiple locations, but more importantly gives us modular extraction ie. we dont have to find it in multiple locations.  Leads to the problem solving technique 'divide and conquer'.  Break a hard/big problem up into multiple easy/small problems.  Small problems have 2 advantages:
1. Small problems are easier to solve
2. Solutions to small problems can easily be combined to solve the big/hard problem.
** Recursion 
Not subtle, divide and conquer, recursion is used in two ways in computer science:
- to describe the problem
- to design a solutio to the problem.
Recursion has 2  parts
- the base case describes the simplest part, gives a direct answer, and
- the inductive part
  - this part is broken down into simpler parts plus some simpler operations to solve the problem
For example:
If I have a very weak computer that can only solve multiplication how do I solve b^n?
Start by breaking down the problem.  
* useful commands
raw_input (2.x) all input is of type str even for example 3.2
bothraw_input and input (3.x) requires input to continue running the script. 
The input data is interperted as a string.
range(x,y) = ( x, x+1, x+2, ... y-1) a sequence ending at y-1 starting at x
break exits the loop without executing all the values in the range, if the
loop is nested only jumps to the next nested loop.
Using + (concat) in a print statememt allows for precice control of the 
space character.  
for will iterate accross the characters in a string.

Assert evaluates an expression to TRUE of FALSE.  
- if TRUE nothing happens and the program continues
- If FALSE the program halts. Dead.
Assert is useful for stopping  a program if the wrong input is provided by the user.
